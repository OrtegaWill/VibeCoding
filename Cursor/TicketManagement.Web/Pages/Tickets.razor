@page "/tickets"
@using TicketManagement.Core.Models
@inject HttpClient Http
@inject ILogger<Tickets> Logger
@inject IJSRuntime JSRuntime

<PageTitle>Tickets - Ticket Management</PageTitle>

<div class="container-fluid">
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Tickets</h1>
        <a href="/tickets/new" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm">
            <i class="fas fa-plus fa-sm text-white-50"></i> New Ticket
        </a>
    </div>

    <!-- Filters -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">Filters</h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <label for="statusFilter">Status</label>
                    <select id="statusFilter" class="form-control" @bind="selectedStatus" @bind:after="OnFilterChanged">
                        <option value="">All Statuses</option>
                        @foreach (var status in Enum.GetValues<TicketStatus>())
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="priorityFilter">Priority</label>
                    <select id="priorityFilter" class="form-control" @bind="selectedPriority" @bind:after="OnFilterChanged">
                        <option value="">All Priorities</option>
                        @foreach (var priority in Enum.GetValues<TicketPriority>())
                        {
                            <option value="@priority">@priority</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="categoryFilter">Category</label>
                    <select id="categoryFilter" class="form-control" @bind="selectedCategory" @bind:after="OnFilterChanged">
                        <option value="">All Categories</option>
                        @foreach (var category in Enum.GetValues<TicketCategory>())
                        {
                            <option value="@category">@category</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="searchTerm">Search</label>
                    <div class="input-group">
                        <input type="text" id="searchTerm" class="form-control" placeholder="Search tickets..." 
                               @bind="searchTerm" @bind:event="oninput" @onkeyup="OnSearchKeyUp" />
                        <div class="input-group-append">
                            <button class="btn btn-outline-secondary" type="button" @onclick="OnSearch">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- Tickets Table -->
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Tickets (@filteredTickets?.Count)</h6>
            </div>
            <div class="card-body">
                @if (filteredTickets?.Any() == true)
                {
                    <div class="table-responsive">
                        <table class="table table-bordered" width="100%" cellspacing="0">
                            <thead>
                                <tr>
                                    <th>Ticket #</th>
                                    <th>Subject</th>
                                    <th>Status</th>
                                    <th>Priority</th>
                                    <th>Category</th>
                                    <th>Assigned To</th>
                                    <th>Created</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var ticket in filteredTickets)
                                {
                                    <tr>
                                        <td>
                                            <a href="/tickets/@ticket.Id" class="text-decoration-none">
                                                @ticket.TicketNumber
                                            </a>
                                        </td>
                                        <td>@ticket.Subject</td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(ticket.Status)">
                                                @ticket.Status
                                            </span>
                                        </td>
                                        <td>
                                            <span class="badge @GetPriorityBadgeClass(ticket.Priority)">
                                                @ticket.Priority
                                            </span>
                                        </td>
                                        <td>@ticket.Category</td>
                                        <td>@(ticket.AssignedTo ?? "Unassigned")</td>
                                        <td>@ticket.CreatedAt.ToString("MM/dd/yyyy")</td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a href="/tickets/@ticket.Id" class="btn btn-sm btn-outline-primary">
                                                    <i class="fas fa-eye"></i>
                                                </a>
                                                <a href="/tickets/@ticket.Id/edit" class="btn btn-sm btn-outline-secondary">
                                                    <i class="fas fa-edit"></i>
                                                </a>
                                                <button type="button" class="btn btn-sm btn-outline-danger" @onclick="() => DeleteTicket(ticket.Id)">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p class="text-muted">No tickets found matching the current filters.</p>
                }
            </div>
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private List<Ticket>? allTickets;
    private List<Ticket>? filteredTickets;
    private TicketStatus? selectedStatus;
    private TicketPriority? selectedPriority;
    private TicketCategory? selectedCategory;
    private string searchTerm = "";
    private Timer? searchTimer;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadTickets();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading tickets");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadTickets()
    {
        var response = await Http.GetAsync("api/tickets");
        if (response.IsSuccessStatusCode)
        {
            allTickets = await response.Content.ReadFromJsonAsync<List<Ticket>>();
            ApplyFilters();
        }
    }

    private void ApplyFilters()
    {
        if (allTickets == null)
        {
            filteredTickets = new List<Ticket>();
            return;
        }

        var filtered = allTickets.AsEnumerable();

        if (selectedStatus.HasValue)
        {
            filtered = filtered.Where(t => t.Status == selectedStatus.Value);
        }

        if (selectedPriority.HasValue)
        {
            filtered = filtered.Where(t => t.Priority == selectedPriority.Value);
        }

        if (selectedCategory.HasValue)
        {
            filtered = filtered.Where(t => t.Category == selectedCategory.Value);
        }

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            filtered = filtered.Where(t =>
                t.Subject.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.TicketNumber.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (t.CustomerEmail?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
            );
        }

        filteredTickets = filtered.OrderByDescending(t => t.CreatedAt).ToList();
        StateHasChanged();
    }

    private void OnFilterChanged()
    {
        ApplyFilters();
    }

    private void OnSearchKeyUp()
    {
        searchTimer?.Dispose();
        searchTimer = new Timer(async _ =>
        {
            await InvokeAsync(() =>
            {
                ApplyFilters();
                StateHasChanged();
            });
        }, null, 500, Timeout.Infinite);
    }

    private void OnSearch()
    {
        ApplyFilters();
    }

    private async Task DeleteTicket(int ticketId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this ticket?" }))
        {
            try
            {
                var response = await Http.DeleteAsync($"api/tickets/{ticketId}");
                if (response.IsSuccessStatusCode)
                {
                    await LoadTickets();
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting ticket {TicketId}", ticketId);
            }
        }
    }

    private string GetStatusBadgeClass(TicketStatus status)
    {
        return status switch
        {
            TicketStatus.Backlog => "badge-secondary",
            TicketStatus.InProgress => "badge-primary",
            TicketStatus.InReview => "badge-info",
            TicketStatus.Resolved => "badge-success",
            TicketStatus.Blocked => "badge-warning",
            TicketStatus.Closed => "badge-dark",
            _ => "badge-secondary"
        };
    }

    private string GetPriorityBadgeClass(TicketPriority priority)
    {
        return priority switch
        {
            TicketPriority.Low => "badge-success",
            TicketPriority.Medium => "badge-warning",
            TicketPriority.High => "badge-danger",
            TicketPriority.Critical => "badge-dark",
            _ => "badge-secondary"
        };
    }
} 